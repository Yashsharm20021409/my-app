1. html k under ek div compent h jo ki js ki help se operate hoga
2. app.js :- ek component h of react.js and similar this we can create other components and then add into app.js
   hmre sare component (src folder k under rhte h)

3. index.js :- ye entry point h jse app dhk skte h vo ek app component ko render krne me help kr rha h(means run krne m)
   uske bd jo line h (document.getElementById('root')) eska mtlb h jo bhi component h use es div me lekr jao
   this is the main file to run  component and this is the file which operate root div present in index.html

4. there are two types of component in react
   1. class based :- phle used hote th lkn ab func based prefer krte h bcoz they are easy to implement as compared to class based
   2. function based(check in app.js)

5. why we use 'use strict" mode :- to avoid nay kind of bug problem(avoid direct declartion of varibale without data type) and many more reasons main is avoid bugs

advantage 

1. lightweight application bnane k lie ek single html file and multiple js file 
2. much less JavaScript likhne pdegi program me
3. reuse of components


#jsx :- JavaScript synatax extension (where we write html and can also be inserted js in html syntax as you can see in app.js file in {} )

/* anything inside {} known as javaScript in JSX Which is Not Possible in HTML (you can also insert a img inside braces) see in app.js files*/

jsx return inside return method and it is 95% html with 5% some changes

v.imp :- we can return only one element in function return which we discuss above like in app.js first we return div  only if we try to return more then one element we will get the error
if you want to return multiple element then you have to use jsx framgent <></> in this we will enclose all the elements(div1,div2,h2 etc.)


Note :- agar kise tag ka closing tag ni h to error milegi tag like (hr,img,input,etc) to solve this
<hr/>
<img src='' /> like that we have to close them

{Babel compiles JSX down to React.createElement() calls.}

These two examples are identical:

const element = (
  <h1 className="greeting">
    Hello, world!
  </h1>
);

bable compile above(jsx) synatx to niche vale syntax me

const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);

React.createElement() performs a few checks to help you write bug-free code but essentially it creates an object like this:

// Note: this structure is simplified
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};
These objects are called “React elements”. You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.

//Props:- basically the value we send to the component like me did in app.js and used in nav.js
in navbar.js file we use it like props.NameOfPropes Which we pass from app.js

types:-


//State(useState)
it is a hook(Hooks are a new addition in React 16.8 They let you use state and other React
features without writing a class.) bina class bny state ko use krna me help jo krte h unhe hooks bolte h
diff types:
1.useState
2.useEffect 
etc

jb bhi hm count ko use krenge or jha bhi update krnege(using setCount) vo whi pe update hota jyga without reloding our page (this is basically useState or state)

// Declare a new state variable, which we'll call "count"
use like { const [count, setCount] = useState(0); } after importing